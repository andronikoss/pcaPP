\documentclass[12pt]{article}
\usepackage{Sweave}

%\VignetteIndexEntry{Compiling pcaPP for Matlab}
%\VignetteDepends{pcaPP}
%\VignetteKeywords{Matlab}
%\VignettePackage{pcaPP}

\newcommand{\proglang}[1]{\textbf{#1}}
\newcommand{\code}[1]{\texttt{#1}}
\newcommand{\link}[1]{\texttt{#1}}
\newcommand{\path}[1]{{\it #1}}

\newcommand{\dapck}{pcaPP }


\title{Compiling \dapck  for Matlab}
\author{Heinrich Fritz}


\begin{document}
\maketitle

\section{Introduction}
The main functions of the 
\proglang{R}-package \dapck  are implemented in an environ-ment-independent 
manner, which allows the user to use this package beyond the scope of \proglang{R}.
The package has also been prepared to be compiled and used with \proglang{Matlab}, which 
is summarized and demonstrated in this document.
The following items are required for using \dapck  together with \proglang{Matlab}:

\begin{itemize}
\item The \dapck  package sources\\(available at \link{http://CRAN.R-project.org/package=\dapck}).
\item \proglang{Matlab} (version $\geq$ 2010a).
\item A compatible \proglang{C++} compiler (for currently supported compilers see \link{http://www.mathworks.com/support/compilers/current\_release/}).
\end{itemize}
Section \ref{sec:instcomp} helps to set up a suitable compiler together with 
\proglang{Matlab}, whereas Section \ref{sec:comp} gives instructions on how to 
actually compile the package. 
Section \ref{sec:ex} demonstrates some examples on the usage of the package and 
Section \ref{sec:concl} concludes.

\section{Setting up the Compiler} \label{sec:instcomp}
Assuming that \proglang{Matlab} has already been set up properly on the target 
system, the first step is to set up a suitable \proglang{C++} compiler, such that \proglang{Matlab} 
recognizes it.
A list of compatible compilers can be obtained by typing
\begin{Scode}
>> mex -setup
   n
\end{Scode}
into the \proglang{Matlab} console.
Once a compiler from this list has been installed on the system, select it
(by using the previous command)
and make sure that \proglang{Matlab} locates it correctly.
Note that after installing a compiler \proglang{Matlab} might have to be 
restarted for correctly recognizing it.
Finally make sure that the compiler has been set up properly by typing
\begin{Scode}
>> mex.getCompilerConfigurations ('C++')
\end{Scode}
\proglang{Matlab} should now correctly display the chosen compiler's details.
A more extensive introduction to the mex-interface and its configuration can be found at
\code{http://www.mathworks.de/support/tech-notes/1600/1605.html}.


\section{Compiling \dapck} \label{sec:comp}

Extract the downloaded package sources to a working directory,
(e.g. \path{C:/work}),
and set \proglang{Matlab}'s current directory to this folder:
\begin{Scode}
>> cd ('C:/work')
\end{Scode}
Now the package is ready to be compiled by typing 
\begin{Scode}
>> cd ('pcaPP/src')
>> mex -DMATLAB_MEX_FILE -llibmwblas -llibmwlapack         ... 
   pcaPP.cpp L1Median_HoCr.cpp L1Median_VardiZhang.cpp     ...
   ML_meal.cpp ML_package.cpp ML_passrng.cpp outSDo.cpp    ...
   PCAgrid.cpp PCAproj.cpp qnn.cpp smat.cpp

\end{Scode}
\proglang{Matlab} will now generate a so-called mex file (\path{pcaPP.mex??}), which contains the 
package executables.
Note that for compiling the package Microsoft's Visual C++ 6.0 compiler has been used.
Other compilers supported by \proglang{Matlab} are very likely to work as well, but have not been tested in this context yet.
The resulting mex file is copied to the \path{matlab} source folder which comes with the downloaded
package sources:
\begin{Scode}
>> copyfile ('pcaPP.mex*', '../matlab')
\end{Scode}
The current directory is then changed to this folder
\begin{Scode}
>> cd ('../matlab')
\end{Scode}
and the compiled package can finally be used.

\section{Using \dapck} \label{sec:ex}
Once the preceding code has been executed successfully, the \dapck  package can 
be used almost the same way as in \proglang{R}.
The following functions are available in \proglang{Matlab}:
\code{l1median\_HoCr}, \code{l1median\_VaZh}, \code{PCAgrid}, \code{PCAproj}, \code{qn}, \code{sPCAgrid}
and work as described in the \proglang{R} man pages:

\begin{Scode}
>> rand('seed', 0) ;
>> X = rand (100, 5) ;
>> mHC = l1median_HoCr (X)

mHC =

    0.5261    0.5123    0.5171    0.4963    0.4635

>> mVZ = l1median_VaZh (X)

mVZ =

    0.5261    0.5123    0.5171    0.4963    0.4635

>> pc = PCAgrid (X)

pc = 

        sdev: [0.4251 0.3939]
    loadings: [5x2 double]
           k: 2
         obj: [0.1807 0.1552]
       n_obs: 100
       scale: [1 1 1 1 1]
      center: [0.5261 0.5123 0.5171 0.4963 0.4635]
    pc_order: [1 2]
      scores: [100x2 double]

>> sp = PCAproj (X, 2)

sp = 

    loadings: [5x2 double]
        sdev: [0.4027 0.3835]
      center: [0.5261 0.5123 0.5171 0.4963 0.4635]
       scale: [1 1 1 1 1]
       n_obs: 100
      scores: [100x2 double]

>> sp = PCAproj (X, 5, 'mad', 'lincomb')

sp = 

    loadings: [5x5 double]
        sdev: [2.0793 0.4027 0.3835 0.3474 0.3110]
      center: [0.5261 0.5123 0.5171 0.4963 0.4635]
       scale: [1 1 1 1 1]
       n_obs: 100
      scores: [100x5 double]

>> sc = qn (X)

sc =

    0.2958

\end{Scode}

\section{Conclusions} \label{sec:concl}
The configuration of a \proglang{C++} compiler in the context of \proglang{Matlab} has 
been discussed briefly, as well as how to compile the \proglang{R} package \dapck in 
this environment.
Further some examples on how to use the package in \proglang{Matlab} were given.
Due to the package's architecture the same \proglang{C++} sources can be used in 
both environments, which increases the availability of this software beyond the scope
of the \proglang{R} community.

\end{document}
